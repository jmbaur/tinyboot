const std = @import("std");

pub fn build(b: *std.Build) !void {
    const target = b.standardTargetOptions(.{});
    const optimize = b.standardOptimizeOption(.{});

    const upstream = b.dependency("xz", .{});
    const lib = b.addStaticLibrary(.{
        .name = "xz",
        .target = target,
        .optimize = optimize,
    });

    lib.addIncludePath(upstream.path("src/liblzma/api"));
    lib.addIncludePath(upstream.path("src/liblzma/common"));
    lib.addIncludePath(upstream.path("src/liblzma/check"));
    lib.addIncludePath(upstream.path("src/liblzma/lz"));
    lib.addIncludePath(upstream.path("src/liblzma/rangecoder"));
    lib.addIncludePath(upstream.path("src/liblzma/lzma"));
    lib.addIncludePath(upstream.path("src/liblzma/delta"));
    lib.addIncludePath(upstream.path("src/liblzma/simple"));
    lib.addIncludePath(upstream.path("src/common"));

    lib.installHeadersDirectory(upstream.path("src/liblzma/api"), "", .{});

    lib.linkLibC();

    lib.addCSourceFiles(.{
        .root = upstream.path(""),
        .files = &.{
            "src/liblzma/check/check.c",
            // "src/liblzma/check/crc32_fast.c",
            "src/liblzma/check/crc32_small.c",
            // "src/liblzma/check/crc32_tablegen.c",
            // "src/liblzma/check/crc64_fast.c",
            "src/liblzma/check/crc64_small.c",
            // "src/liblzma/check/crc64_tablegen.c",
            // "src/liblzma/check/crc_clmul_consts_gen.c",
            "src/liblzma/check/sha256.c",
            "src/liblzma/common/alone_decoder.c",
            "src/liblzma/common/alone_encoder.c",
            "src/liblzma/common/auto_decoder.c",
            "src/liblzma/common/block_buffer_decoder.c",
            "src/liblzma/common/block_buffer_encoder.c",
            "src/liblzma/common/block_decoder.c",
            "src/liblzma/common/block_encoder.c",
            "src/liblzma/common/block_header_decoder.c",
            "src/liblzma/common/block_header_encoder.c",
            "src/liblzma/common/block_util.c",
            "src/liblzma/common/common.c",
            "src/liblzma/common/easy_buffer_encoder.c",
            "src/liblzma/common/easy_decoder_memusage.c",
            "src/liblzma/common/easy_encoder.c",
            "src/liblzma/common/easy_encoder_memusage.c",
            "src/liblzma/common/easy_preset.c",
            "src/liblzma/common/file_info.c",
            "src/liblzma/common/filter_buffer_decoder.c",
            "src/liblzma/common/filter_buffer_encoder.c",
            "src/liblzma/common/filter_common.c",
            "src/liblzma/common/filter_decoder.c",
            "src/liblzma/common/filter_encoder.c",
            "src/liblzma/common/filter_flags_decoder.c",
            "src/liblzma/common/filter_flags_encoder.c",
            "src/liblzma/common/hardware_cputhreads.c",
            "src/liblzma/common/hardware_physmem.c",
            "src/liblzma/common/index.c",
            "src/liblzma/common/index_decoder.c",
            "src/liblzma/common/index_encoder.c",
            "src/liblzma/common/index_hash.c",
            "src/liblzma/common/lzip_decoder.c",
            "src/liblzma/common/microlzma_decoder.c",
            "src/liblzma/common/microlzma_encoder.c",
            "src/liblzma/common/outqueue.c",
            "src/liblzma/common/stream_buffer_decoder.c",
            "src/liblzma/common/stream_buffer_encoder.c",
            "src/liblzma/common/stream_decoder.c",
            // "src/liblzma/common/stream_decoder_mt.c",
            "src/liblzma/common/stream_encoder.c",
            // "src/liblzma/common/stream_encoder_mt.c",
            "src/liblzma/common/stream_flags_common.c",
            "src/liblzma/common/stream_flags_decoder.c",
            "src/liblzma/common/stream_flags_encoder.c",
            "src/liblzma/common/string_conversion.c",
            "src/liblzma/common/vli_decoder.c",
            "src/liblzma/common/vli_encoder.c",
            "src/liblzma/common/vli_size.c",
            "src/liblzma/delta/delta_common.c",
            "src/liblzma/delta/delta_decoder.c",
            "src/liblzma/delta/delta_encoder.c",
            "src/liblzma/lz/lz_decoder.c",
            "src/liblzma/lz/lz_encoder.c",
            "src/liblzma/lz/lz_encoder_mf.c",
            // "src/liblzma/lzma/fastpos_table.c",
            // "src/liblzma/lzma/fastpos_tablegen.c",
            "src/liblzma/lzma/lzma2_decoder.c",
            "src/liblzma/lzma/lzma2_encoder.c",
            "src/liblzma/lzma/lzma_decoder.c",
            "src/liblzma/lzma/lzma_encoder.c",
            "src/liblzma/lzma/lzma_encoder_optimum_fast.c",
            "src/liblzma/lzma/lzma_encoder_optimum_normal.c",
            "src/liblzma/lzma/lzma_encoder_presets.c",
            "src/liblzma/rangecoder/price_table.c",
            // "src/liblzma/rangecoder/price_tablegen.c",
            "src/liblzma/simple/arm.c",
            "src/liblzma/simple/arm64.c",
            "src/liblzma/simple/armthumb.c",
            "src/liblzma/simple/ia64.c",
            "src/liblzma/simple/powerpc.c",
            "src/liblzma/simple/riscv.c",
            "src/liblzma/simple/simple_coder.c",
            "src/liblzma/simple/simple_decoder.c",
            "src/liblzma/simple/simple_encoder.c",
            "src/liblzma/simple/sparc.c",
            "src/liblzma/simple/x86.c",
            "src/common/tuklib_cpucores.c",
            "src/common/tuklib_physmem.c",
        },
        // replacement for config.h
        .flags = &.{
            "-DASSUME_RAM=32",
            "-DHAVE_CHECK_CRC32",
            "-DHAVE_CHECK_CRC64",
            "-DHAVE_CHECK_SHA256",
            "-DHAVE_CRC_X86_ASM",
            "-DHAVE_DECODERS",
            "-DHAVE_DECODER_ARM",
            "-DHAVE_DECODER_ARM64",
            "-DHAVE_DECODER_ARMTHUMB",
            "-DHAVE_DECODER_DELTA",
            "-DHAVE_DECODER_IA64",
            "-DHAVE_DECODER_LZMA1",
            "-DHAVE_DECODER_LZMA2",
            "-DHAVE_DECODER_POWERPC",
            "-DHAVE_DECODER_SPARC",
            "-DHAVE_DECODER_X86",
            "-DHAVE_ENCODERS",
            "-DHAVE_ENCODER_ARM",
            "-DHAVE_ENCODER_ARM64",
            "-DHAVE_ENCODER_ARMTHUMB",
            "-DHAVE_ENCODER_DELTA",
            "-DHAVE_ENCODER_IA64",
            "-DHAVE_ENCODER_LZMA1",
            "-DHAVE_ENCODER_LZMA2",
            "-DHAVE_ENCODER_POWERPC",
            "-DHAVE_ENCODER_SPARC",
            "-DHAVE_ENCODER_X86",
            "-DHAVE_INTTYPES_H",
            "-DHAVE_LZIP_DECODER",
            "-DHAVE_MF_BT2",
            "-DHAVE_MF_BT3",
            "-DHAVE_MF_BT4",
            "-DHAVE_MF_HC3",
            "-DHAVE_MF_HC4",
            "-DHAVE_STDBOOL_H",
            "-DHAVE_STDINT_H",
            "-DHAVE_UTIMES",
            "-DHAVE_VISIBILITY=0",
            "-DHAVE__BOOL",
            "-DHAVE___BUILTIN_ASSUME_ALIGNED",
            "-DHAVE___BUILTIN_BSWAPXX",
            "-DNDEBUG",
            "-DPACKAGE_BUGREPORT=\"xz@tukaani.org\"",
            "-DPACKAGE_NAME=\"XZ Utils\"",
            "-DPACKAGE_URL=\"https://tukaani.org/xz/\"",
            b.fmt("-DSIZEOF_SIZE_T={}", .{target.result.ptrBitWidth() / 8}),
            "-DTUKLIB_FAST_UNALIGNED_ACCESS",
            "-DHAVE_SMALL",
            "-DLZMA_API_STATIC"
        },
    });

    b.installArtifact(lib);
}
